# Packet description Notes
# tagged-unions always have a header that will appear in all items in the union
# The idea here is that this will cleanly map to a C union, with each item
# being a struct with the first item being the header. This makes it easy to
# cast a packet into either a header, or a specific type based on the tag
# names are converted to one of several naming conventions
# Type names (so names of structs) are renamed to
# CapitalCamelCase
# Field names are converted to lower_snake_case
# This allows the fields and packets have nice readable names, but be converted to
# programming language idiomatic names at compile time
packet:
    type: tagged-union
    name: Concentrator Packet
    header:
      type: struct
      name: Packet Header
      fields:
        - name: Source address
          type: uint8
        - name: Packet Type # This is the type of the union (one of items)
          type: uint8
          is_tag: true # Need some method to identify which header field is the "tag" for the tagged union
    fields:
      - name: Ack Packet
        type: struct # empty types are indistinguishable from headers data wise, but have a unique tagg
        fields: []
      - name: ADC Sensor Packet # -> AdcSensorPacket
        type: struct
        fields:
          - name: ADC Value
            type: uint16
      - name: Dual Mode Sensor Packet
        type: struct
        fields:
          - name: ADC Value
            type: uint16
          - name: Battery Percentage
            type: uint16
          - name: time
            type: uint32
          - name: button
            type: uint8
          - name: Conc Led Toggle
            type: bool




